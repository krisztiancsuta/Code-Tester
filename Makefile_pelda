# Makefile for MSPM0G3507 Empty Project
# Based on TI Code Composer Studio generated build files

# Project configuration
PROJECT_NAME = Code_tester
BUILD_DIR = Debug
SYSCFG_DIR = $(BUILD_DIR)/syscfg
DEBUG_INFO_DIR = $(BUILD_DIR)/debug_info
DEBUG_BUILD_DIR = $(BUILD_DIR)/debug_build
FLASH_DEBUG_DIR = Flash_or_Debug

# Toolchain paths - Update these paths according to your installation
GCC_ARM_ROOT = $(HOME)/ti/gcc_arm_none_eabi_9_2_1
MSPM0_SDK_ROOT = $(HOME)/ti/mspm0_sdk_2_05_01_00
SYSCONFIG_CLI = $(HOME)/ti/ccs2020/ccs/utils/sysconfig_1.24.0/sysconfig_cli.sh

# Toolchain
CC = $(GCC_ARM_ROOT)/bin/arm-none-eabi-gcc-9.2.1
LD = $(GCC_ARM_ROOT)/bin/arm-none-eabi-gcc-9.2.1
OBJCOPY = $(GCC_ARM_ROOT)/bin/arm-none-eabi-objcopy
SIZE = $(GCC_ARM_ROOT)/bin/arm-none-eabi-size
OBJDUMP = $(GCC_ARM_ROOT)/bin/arm-none-eabi-objdump
NM = $(GCC_ARM_ROOT)/bin/arm-none-eabi-nm
READELF = $(GCC_ARM_ROOT)/bin/arm-none-eabi-readelf

# Source files
C_SOURCES = \
	empty_mspm0g3507.c \
	$(SYSCFG_DIR)/ti_msp_dl_config.c

# Startup file from SDK
STARTUP_SOURCE = $(MSPM0_SDK_ROOT)/source/ti/devices/msp/m0p/startup_system_files/gcc/startup_mspm0g350x_gcc.c

# Include paths
INCLUDES = \
	-I. \
	-I$(BUILD_DIR) \
	-I$(SYSCFG_DIR) \
	-I$(MSPM0_SDK_ROOT)/source/third_party/CMSIS/Core/Include \
	-I$(MSPM0_SDK_ROOT)/source \
	-I$(GCC_ARM_ROOT)/arm-none-eabi/include/newlib-nano \
	-I$(GCC_ARM_ROOT)/arm-none-eabi/include

# Compiler flags
CFLAGS = \
	-c \
	-mcpu=cortex-m0plus \
	-march=armv6-m \
	-mthumb \
	-mfloat-abi=soft \
	-O2 \
	-ffunction-sections \
	-fdata-sections \
	-g \
	-gdwarf-3 \
	-gstrict-dwarf \
	-Wall \
	-std=c99 \
	-D__MSPM0G3507__

# Debug compiler flags
DEBUG_CFLAGS = \
	-c \
	-mcpu=cortex-m0plus \
	-march=armv6-m \
	-mthumb \
	-mfloat-abi=soft \
	-O0 \
	-ffunction-sections \
	-fdata-sections \
	-g3 \
	-gdwarf-3 \
	-gstrict-dwarf \
	-Wall \
	-std=c99 \
	-D__MSPM0G3507__ \
	-DDEBUG

# Linker flags
LDFLAGS = \
	-O2 \
	-ffunction-sections \
	-fdata-sections \
	-g \
	-gdwarf-3 \
	-gstrict-dwarf \
	-Wall \
	-mthumb \
	-mfloat-abi=soft \
	-nostartfiles \
	-static \
	-Wl,--gc-sections \
	-Wl,-Map,$(BUILD_DIR)/$(PROJECT_NAME).map \
	-march=armv6-m \
	-mthumb \
	-T$(SYSCFG_DIR)/device_linker.lds \
	-L$(SYSCFG_DIR) \
	-L$(MSPM0_SDK_ROOT)/source \
	-L$(GCC_ARM_ROOT)/arm-none-eabi/lib/thumb/v6-m/nofp

# Debug linker flags
DEBUG_LDFLAGS = \
	-O0 \
	-ffunction-sections \
	-fdata-sections \
	-g3 \
	-gdwarf-3 \
	-gstrict-dwarf \
	-Wall \
	-mthumb \
	-mfloat-abi=soft \
	-nostartfiles \
	-static \
	-Wl,--gc-sections \
	-Wl,-Map,$(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.map \
	-march=armv6-m \
	-mthumb \
	-T$(SYSCFG_DIR)/device_linker.lds \
	-L$(SYSCFG_DIR) \
	-L$(MSPM0_SDK_ROOT)/source \
	-L$(GCC_ARM_ROOT)/arm-none-eabi/lib/thumb/v6-m/nofp

# Libraries
LIBS = \
	-l:device.lds.genlibs \
	-lgcc \
	-lc \
	-lm \
	-lnosys

# Object files
OBJECTS = $(addprefix $(BUILD_DIR)/, $(notdir $(C_SOURCES:.c=.o)))
# Place ti_msp_dl_config object in syscfg folder like CCS does
OBJECTS := $(filter-out $(BUILD_DIR)/ti_msp_dl_config.o, $(OBJECTS))
OBJECTS += $(SYSCFG_DIR)/ti_msp_dl_config.o
OBJECTS += $(BUILD_DIR)/startup_mspm0g350x_gcc.o

# Debug object files
DEBUG_OBJECTS = $(addprefix $(DEBUG_BUILD_DIR)/, $(notdir $(C_SOURCES:.c=_debug.o)))
# Place debug ti_msp_dl_config object in debug_build folder
DEBUG_OBJECTS := $(filter-out $(DEBUG_BUILD_DIR)/ti_msp_dl_config_debug.o, $(DEBUG_OBJECTS))
DEBUG_OBJECTS += $(DEBUG_BUILD_DIR)/ti_msp_dl_config_debug.o
DEBUG_OBJECTS += $(DEBUG_BUILD_DIR)/startup_mspm0g350x_gcc_debug.o

# SysConfig generated files
SYSCFG_OUTPUTS = \
	$(SYSCFG_DIR)/device_linker.lds \
	$(SYSCFG_DIR)/device.opt \
	$(SYSCFG_DIR)/device.lds.genlibs \
	$(SYSCFG_DIR)/ti_msp_dl_config.c \
	$(SYSCFG_DIR)/ti_msp_dl_config.h

# Default target
all: $(BUILD_DIR)/$(PROJECT_NAME).out

# Create build directory
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)
	mkdir -p $(SYSCFG_DIR)

# SysConfig target - use existing syscfg files if available, otherwise generate
$(SYSCFG_OUTPUTS): empty_mspm0g3507.syscfg | $(BUILD_DIR)
	@echo "Checking SysConfig files..."
	@if [ ! -f "$(SYSCFG_DIR)/ti_msp_dl_config.c" ]; then \
		echo "Running SysConfig to generate files..."; \
		$(SYSCONFIG_CLI) --script $< -o $(SYSCFG_DIR) -s $(MSPM0_SDK_ROOT)/.metadata/product.json --compiler gcc; \
	else \
		echo "Using existing SysConfig files in $(SYSCFG_DIR)"; \
		touch $(SYSCFG_OUTPUTS); \
	fi

# Compile main source file
$(BUILD_DIR)/empty_mspm0g3507.o: empty_mspm0g3507.c $(SYSCFG_OUTPUTS)
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"$(@:.o=.d)" -MT"$@" -o $@ $<

# Compile SysConfig generated source - place in syscfg folder like CCS
$(SYSCFG_DIR)/ti_msp_dl_config.o: $(SYSCFG_DIR)/ti_msp_dl_config.c $(SYSCFG_OUTPUTS)
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"$(SYSCFG_DIR)/ti_msp_dl_config.d" -MT"$@" -o $@ $<

# Compile startup file
$(BUILD_DIR)/startup_mspm0g350x_gcc.o: $(STARTUP_SOURCE) $(SYSCFG_OUTPUTS)
	@echo "Compiling startup file..."
	$(CC) $(CFLAGS) $(INCLUDES) -MMD -MP -MF"$(@:.o=.d)" -MT"$@" -o $@ $<

# Debug compilation targets
$(DEBUG_BUILD_DIR)/empty_mspm0g3507_debug.o: empty_mspm0g3507.c $(SYSCFG_OUTPUTS)
	@mkdir -p $(DEBUG_BUILD_DIR)
	@echo "Compiling $< (debug)..."
	$(CC) $(DEBUG_CFLAGS) $(INCLUDES) -MMD -MP -MF"$(@:.o=.d)" -MT"$@" -o $@ $<

# Debug SysConfig compilation - place in debug_build folder
$(DEBUG_BUILD_DIR)/ti_msp_dl_config_debug.o: $(SYSCFG_DIR)/ti_msp_dl_config.c $(SYSCFG_OUTPUTS)
	@mkdir -p $(DEBUG_BUILD_DIR)
	@echo "Compiling $< (debug)..."
	$(CC) $(DEBUG_CFLAGS) $(INCLUDES) -MMD -MP -MF"$(DEBUG_BUILD_DIR)/ti_msp_dl_config_debug.d" -MT"$@" -o $@ $<

$(DEBUG_BUILD_DIR)/startup_mspm0g350x_gcc_debug.o: $(STARTUP_SOURCE) $(SYSCFG_OUTPUTS)
	@mkdir -p $(DEBUG_BUILD_DIR)
	@echo "Compiling startup file (debug)..."
	$(CC) $(DEBUG_CFLAGS) $(INCLUDES) -MMD -MP -MF"$(@:.o=.d)" -MT"$@" -o $@ $<

# Link
$(BUILD_DIR)/$(PROJECT_NAME).out: $(OBJECTS)
	@echo "Linking $@..."
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Build complete!"
	$(SIZE) $@

# Debug link
$(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out: $(DEBUG_OBJECTS)
	@mkdir -p $(DEBUG_BUILD_DIR)
	@echo "Linking $@ (debug)..."
	$(LD) $(DEBUG_LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Debug build complete!"
	$(SIZE) $@

# Generate hex file
hex: $(BUILD_DIR)/$(PROJECT_NAME).hex

$(BUILD_DIR)/$(PROJECT_NAME).hex: $(BUILD_DIR)/$(PROJECT_NAME).out
	@echo "Generating hex file..."
	$(OBJCOPY) -O ihex $< $@

# Generate binary file
bin: $(BUILD_DIR)/$(PROJECT_NAME).bin

$(BUILD_DIR)/$(PROJECT_NAME).bin: $(BUILD_DIR)/$(PROJECT_NAME).out
	@echo "Generating binary file..."
	$(OBJCOPY) -O binary $< $@

# Copy files to Flash_or_Debug folder for flashing/debugging
flash-debug-copy: 
	@mkdir -p $(FLASH_DEBUG_DIR)
	@echo "Copying files to $(FLASH_DEBUG_DIR) folder..."
	@if [ -f "$(BUILD_DIR)/$(PROJECT_NAME).out" ]; then \
		cp "$(BUILD_DIR)/$(PROJECT_NAME).out" "$(FLASH_DEBUG_DIR)/$(PROJECT_NAME).out"; \
		echo "  - Copied release build: $(PROJECT_NAME).out"; \
	fi
	@if [ -f "$(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out" ]; then \
		cp "$(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out" "$(FLASH_DEBUG_DIR)/$(PROJECT_NAME)_debug.out"; \
		echo "  - Copied debug build: $(PROJECT_NAME)_debug.out"; \
	fi
	@if [ -f "targetConfigs/MSPM0G3507.ccxml" ]; then \
		cp "targetConfigs/MSPM0G3507.ccxml" "$(FLASH_DEBUG_DIR)/MSPM0G3507.ccxml"; \
		echo "  - Copied target config: MSPM0G3507.ccxml"; \
	fi
	@echo "Flash/Debug folder ready!"

# Generate debug information files
debug-info: $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out
	@mkdir -p $(DEBUG_INFO_DIR)
	@echo "Generating debug information files..."
	$(OBJDUMP) -h -S $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out > $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.lst
	$(OBJDUMP) -t $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out > $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.sym
	$(NM) -n $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out > $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.nm
	$(READELF) -a $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out > $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.readelf
	@echo "Debug information files generated:"
	@echo "  - $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.lst (disassembly with source)"
	@echo "  - $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.sym (symbol table)"
	@echo "  - $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.nm (symbol addresses)"
	@echo "  - $(DEBUG_INFO_DIR)/$(PROJECT_NAME)_debug.readelf (ELF file analysis)"

# Clean
clean:
	@echo "Cleaning makefile-generated build files..."
	-rm -f $(BUILD_DIR)/*.o
	-rm -f $(BUILD_DIR)/*.d
	-rm -f $(BUILD_DIR)/*.out
	-rm -f $(BUILD_DIR)/*.map
	-rm -f $(BUILD_DIR)/*.hex
	-rm -f $(BUILD_DIR)/*.bin
	-rm -f $(SYSCFG_DIR)/*.o
	-rm -f $(SYSCFG_DIR)/*.d
	-rm -rf $(DEBUG_BUILD_DIR)
	-rm -rf $(DEBUG_INFO_DIR)
	-rm -rf $(FLASH_DEBUG_DIR)

# Clean all build files (including CCS-generated)
clean-all:
	@echo "Cleaning all build files..."
	rm -rf $(BUILD_DIR)
	rm -rf $(FLASH_DEBUG_DIR)

# Debug target (build with extra debug info)
debug: $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out debug-info

# Full debug build with all files
debug-all: debug
	@echo "Generating debug hex and binary files..."
	$(OBJCOPY) -O ihex $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.hex
	$(OBJCOPY) -O binary $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.out $(DEBUG_BUILD_DIR)/$(PROJECT_NAME)_debug.bin

# Prepare Flash_or_Debug folder for flashing/debugging
prepare-flash: flash-debug-copy
	@echo "Flash_or_Debug folder is ready for flashing and debugging!"

# Build everything and prepare for flashing
build-and-flash: all debug prepare-flash

# Check if tools exist
check-tools:
	@echo "Checking toolchain..."
	@test -x $(CC) || (echo "Error: GCC compiler not found at $(CC)" && exit 1)
	@test -x $(SYSCONFIG_CLI) || (echo "Error: SysConfig CLI not found at $(SYSCONFIG_CLI)" && exit 1)
	@test -d $(MSPM0_SDK_ROOT) || (echo "Error: MSPM0 SDK not found at $(MSPM0_SDK_ROOT)" && exit 1)
	@echo "All tools found successfully!"

# Help target
help:
	@echo "Available targets:"
	@echo "  all        - Build the project (default)"
	@echo "  clean      - Remove makefile-generated files only"
	@echo "  clean-all  - Remove all build files (including CCS files)"
	@echo "  hex        - Generate hex file"
	@echo "  bin        - Generate binary file"
	@echo "  debug      - Build with debug symbols and generate debug info"
	@echo "  debug-all  - Build debug version with hex/bin files"
	@echo "  debug-info - Generate debug information files (in debug_info/ folder)"
	@echo ""
	@echo "Special targets for flashing/debugging:"
	@echo "  prepare-flash    - Create Flash_or_Debug folder with .out files and target config"
	@echo "  build-and-flash  - Build everything (release + debug) and prepare for flashing"
	@echo "  flash-debug-copy - Copy .out files and target config to Flash_or_Debug/"
	@echo ""
	@echo "  check-tools - Verify toolchain installation"
	@echo "  help       - Show this help message"
	@echo ""
	@echo "Folder organization:"
	@echo "  Debug/            - Optimized release builds (.out, .map)"
	@echo "  Debug/debug_build/    - Unoptimized debug builds (all _debug files)"
	@echo "  Debug/syscfg/         - SysConfig generated files"
	@echo "  Debug/debug_info/     - Debug analysis files (.lst, .sym, .nm, .readelf)"
	@echo "  Flash_or_Debug/       - Ready-to-flash .out files and target config (created by prepare-flash)"

# Include dependency files
-include $(BUILD_DIR)/*.d
-include $(SYSCFG_DIR)/*.d
-include $(DEBUG_BUILD_DIR)/*.d

.PHONY: all clean clean-all hex bin debug debug-all debug-info flash-debug-copy prepare-flash build-and-flash check-tools help
